/*************************************************
*   the first sample!
*
*************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int tmp;

void* thread(void *arg)
{
        printf("thread id is %d!\n", pthread_self());
        pthread_mutex_lock(&mutex);
        tmp = 12;
        printf("Now a is %d!\n", tmp);
        pthread_mutex_unlock(&mutex);
        return NULL;
}

int main()
{
        pthread_t id;
        printf("main thread id is %d!\n", pthread_self());
        tmp = 3;
        printf("In main func tmp = %d!\n", tmp);
        if (!pthread_create(&id, NULL, thread, NULL))
        {
                printf("Create thread success!");
        }else{
                printf("Create thread failed !");
        }
        pthread_join(id, NULL);
        pthread_mutex_destroy(&mutex);
        return 0;

}


/************************************************
*     the second sample!
*
*************************************************/
#include "stdlib.h"
#include "unistd.h"

pthread_mutex_t mutex;
pthread_cond_t cond;

void hander(void *arg)
{
        free(arg);
        (void)pthread_mutex_unlock(&mutex);
}

void *thread1(void *arg)
{
        pthread_cleanup_push(hander, &mutex);
        while(1)
        {
                printf("thread1 is running\n");
                pthread_mutex_lock(&mutex);
                pthread_cond_wait(&cond,&mutex);
                printf("thread1 applied the condition\n");
                pthread_mutex_unlock(&mutex);
                sleep(4);
        }
        pthread_cleanup_pop(0);
}

void *thread2(void *arg)
{
        while(1)
        {
                printf("thread2 is running\n");
                pthread_mutex_lock(&mutex);
                pthread_cond_wait(&cond,&mutex);
                printf("thread2 applied the condition\n");
                pthread_mutex_unlock(&mutex);
                sleep(1);
        }
}
int main()
{
        pthread_t thid1,thid2;
        printf("condition variable study!\n");
        pthread_mutex_init(&mutex,NULL);
        pthread_cond_init(&cond,NULL);
        pthread_create(&thid1,NULL,thread1,NULL);
        pthread_create(&thid2,NULL,thread2,NULL);
        sleep(1);
        do{
                pthread_cond_signal(&cond);
        }while(1);
        sleep(20);
        pthread_exit(0);
        return 0;
}

/******************************************************
*     the third sample!
*
*******************************************************/
#include <pthread.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

static pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;
static pthread_cond_t cond = PTHREAD_COND_INITIALIZER;

struct node
{
        int n_number;
        struct node *n_next;
} *head = NULL;

static void cleanup_handler(void *arg)
{
        printf("cleanup handler of second thread.\n");
        free(arg);
        pthread_mutex_unlock(&mtx);
}

static void *thread_func(void *arg)
{
        struct node *p = NULL;
        pthread_cleanup_push(cleanup_handler, p);
        while (1)
        {
                pthread_mutex_lock(&mtx);
                while (head == NULL)
                {
                        pthread_cond_wait(&cond, &mtx);
                        p = head;
                        head = head->n_next;
                        printf("get %d from front of queue\n", p->n_number);
                        free(p);
                }
                pthread_mutex_unlock(&mtx);
        }
        pthread_cleanup_pop(0);
        return 0;
}

int main(void)
{
        pthread_t pid;
        int i;
        struct node *p;
        pthread_create(&tid, NULL, thread_func, NULL);
        sleep(1);

        for(i=0; i<10;i++)
        {
                p = (struct node *)malloc(sizeof(struct node));
                p->n_number = i;
                pthread_mutex_lock(&mtx);
                p->n_next = head;
                head = p;
                pthread_cond_signal(&cond);
                pthread_mutex_unlock(&mtx);
                sleep(1);
        }
        printf("cancle the pid !\n");   /*send stop signal to the thread!*/
        pthread_cancel(pid);
        pthread_join(pid, NULL);        /*wait for the thread stop!*/
        printf("All done -- exiting\n");
        return 0;
}


/**********************************************************
*     the fourth  sample!
*
***********************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>
#include <errno.h>

#define return_if_fail(p) \
        if((p) == 0){printf ("[%s]:func error!\n", __func__);return;}        

typedef struct _Seminfo
{
        sem_t s1;
        sem_t s2;
        time_t end_time;
}Seminfo;


static void info_init (Seminfo *p);
static void info_destroy (Seminfo *p);
static void* pthread_func_1 (Seminfo *p);
static void* pthread_func_2 (Seminfo *p);

int main (int argc, char *argv[])
{
        pthread_t ptd1 = 0;
        pthread_t ptd2 = 0;
        int ret = 0;
        Seminfo *psem = NULL;

        psem = (Seminfo* )malloc (sizeof (Seminfo));
        if (psem == NULL)
        {
                printf ("[%s]: Failed to malloc priv.\n");
                return -1;
        }
        info_init (psem);
        ret = pthread_create(&ptd1, NULL, (void*)pthread_func_1, psem);
        if (ret != 0)
                perror ("pthread_1_create:");
        ret = pthread_create(&ptd2, NULL, (void*)pthread_func_2, psem);
        if (ret != 0)
                perror ("pthread_2_create:");
        pthread_join (ptd1, NULL);
        pthread_join (ptd2, NULL);
        info_destroy (psem);
        return 0;
}

static void info_init (Seminfo *p)
{
        return_if_fail (p != NULL);
        p->end_time = time(NULL) + 10;
        sem_init (&p->s1, 0, 1);
        sem_init (&p->s2, 0, 0);
        return;
}

static void info_destroy (Seminfo *p)
{
        return_if_fail (p != NULL);
        sem_destroy (&p->s1);
        sem_destroy (&p->s2);
        free (p);
        p = NULL;
        return;
}


static void* pthread_func_1 (Seminfo *p)
{
        return_if_fail (p != NULL);
        while (time(NULL) < p->end_time)
        {
                sem_wait (&p->s2);
                printf ("pthread1: pthread1 get the lock.\n");
                sem_post (&p->s1);
                printf ("pthread1: pthread1 unlock\n");
                sleep (1);
        }
        return;
}
static void* pthread_func_2 (Seminfo *p)
{
        return_if_fail (p != NULL);
        while (time (NULL) < p->end_time)
        {
                sem_wait (&p->s1);
                printf ("pthread2: pthread2 get the unlock.\n");
                sem_post (&p->s2);
                printf ("pthread2: pthread2 unlock.\n");
                sleep (1);
        }
        return;
}



